import { CompetitionInformation } from '../../shared_types/Competition/CompetitionDetails';
import { Announcement } from '../../shared_types/Competition/staff/Announcement';
import { AttendeesDetails } from '../../shared_types/Competition/staff/AttendeesDetails';
import { EditCourse, EditRego } from '../../shared_types/Competition/staff/Edit';
import { StaffInfo } from '../../shared_types/Competition/staff/StaffInfo';
import { StudentInfo } from '../../shared_types/Competition/student/StudentInfo';
import { TeamDetails } from '../../shared_types/Competition/team/TeamDetails';
import { Competition, CompetitionIdObject } from '../models/competition/competition';
import { CompetitionStaff } from '../models/competition/competitionUser';
import { SeatAssignment } from '../models/team/team';
import { University } from '../models/university/university';

export interface CompetitionStaffRepository {
  competitionStaffUpdateCourses(compId: number, editCourse: EditCourse, universityId: number): Promise<void>;
  competitionInformation(compId: number): Promise<CompetitionInformation>;
  competitionGetCoordinatingSiteId(userId: number, siteId: number): Promise<number>;
  competitionSiteCapacityUpdate(siteId: number, capacity: number): Promise<void>;
  competitionStaffUpdateRegoToggles(userId: number, compId: number, regoFields: EditRego, universityId?: number): Promise<void>;
  competitionStaffRegoToggles(userId: number, compId: number, universityId?: number): Promise<EditRego>;
  competitionCoachCheck(userId: number, compId: number): Promise<void>;
  competitionStaffUpdate(userId: number, staffList: StaffInfo[], compId: number): Promise<Array<number>>;
  competitionStudentsUpdate(userId: number, studentList: StudentInfo[], compId: number): Promise<void>;
  coachCheckIdsStudent (userId: number, userIds: Array<number>, compId: number): Promise<void>;
  coachCheckIds(userId: number, teamIds: Array<number>, compId: number): Promise<void>;
  competitionTeamsUpdate(teamList: Array<TeamDetails>, compId: number): Promise<void>;
  competitionAttendees(userId: number, compId: number): Promise<Array<AttendeesDetails>>;
  competitionStaff(userId: number, compId: number): Promise<StaffInfo[]>;
  competitionStudents(userId: number, compId: number): Promise<StudentInfo[]>;
  competitionTeams(userId: number, compId: number): Promise<TeamDetails[]>;
  competitionSystemAdminCreate(userId: number, competition: Competition): Promise<CompetitionIdObject>;
  competitionSystemAdminUpdate(userId: number, competition: Competition): Promise<{}>;
  competitionStaffDetails(userId: number, compId: number): Promise<StaffInfo>;
  competitionStaffDetailsUpdate(userId: number, compId: number, staffInfo: StaffInfo): Promise<{}>;
  competitionApproveTeamAssignment(userId: number, compId: number, approveIds: Array<number>): Promise<{}>;
  competitionRequestTeamNameChange(userId: number, compId: number, newTeamName: string): Promise<number>;
  competitionApproveTeamNameChange(userId: number, compId: number, approveIds: Array<number>, rejectIds: Array<number>): Promise<{}>;
  competitionApproveSiteChange(userId: number, compId: number, approveIds: Array<number>, rejectIds: Array<number>): Promise<{}>;
  competitionTeamSeatAssignments(userId: number, compId: number, seatAssignments: Array<SeatAssignment>): Promise<{}>;
  competitionRegisterTeams(userId: number, compId: number, teamIds: Array<number>): Promise<{}>;
  competitionStaffJoin(compId: number, competitionStaffInfo: CompetitionStaff): Promise<{}>;
  competitionAnnouncementUpdate(compId: number, university: University, announcement: Announcement): Promise<void>;
  competitionAlgorithm(compId: number, userId: number): Promise<{} | undefined>;
}