services:
  backend:
    build: ./backend
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    environment:
      - NODE_ENV=production

      - BACKEND_HOST=${BACKEND_HOST}
      - BACKEND_PORT=${BACKEND_PORT}
      - BACKEND_URL=${BACKEND_URL}

      - FRONTEND_HOST=${FRONTEND_HOST}
      - FRONTEND_PORT=${FRONTEND_PORT}
      - FRONTEND_URL=${FRONTEND_URL}
      
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB_NAME=${POSTGRES_DB_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - docker-network
    depends_on:
      - db

  frontend:
    build:
      context: ./frontend
      args:
        - VITE_BACKEND_HOST=${BACKEND_HOST}
        - VITE_BACKEND_PORT=${BACKEND_PORT}
        - VITE_BACKEND_URL=${BACKEND_URL}
  
        - VITE_FRONTEND_HOST=${FRONTEND_HOST}
        - VITE_FRONTEND_PORT=${FRONTEND_PORT}
        - VITE_FRONTEND_URL=${FRONTEND_URL}
    ports:
      - "${FRONTEND_PORT}:5173"
    depends_on:
      - backend
    networks:
      - docker-network
  
  db:
    build: ./database
    container_name: capstone_db_container
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    restart: always
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB_NAME=${POSTGRES_DB_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - docker-network
    volumes:
      - db-data:/var/lib/postgresql/data
    stdin_open: true
    tty: true

  # test_db:
  #   build: ./database
  #   container_name: capstone_test_db_container
  #   ports:
  #     - "5433:5432"
  #   restart: always
  #   environment:
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=ab
  #     - POSTGRES_DB=capstone_db_test
  #   networks:
  #     - docker-network
  #   volumes:
  #     - test-db-data:/var/lib/postgresql/data
  #   stdin_open: true
  #   tty: true

volumes:
  db-data:
  test-db-data:
networks:
  docker-network:
